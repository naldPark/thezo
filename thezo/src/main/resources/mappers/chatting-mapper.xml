<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="chattingMapper">

	<!-- @author Jaewon.s -->

	<resultMap id="colleagueResult" type="Colleague">
		<result column="mymem_no" property="myMemNo"/>	
		<result column="comem_no" property="coMemNo"/>	
		<result column="del_status" property="delStatus"/>	
		<result column="my_img_path" property="myImgPath"/>	
		<result column="co_img_path" property="coImgPath"/>	
		<result column="my_name_and_rank" property="myNameAndRank"/>	
		<result column="co_name_and_rank" property="coNameAndRank"/>	
		<result column="room_no" property="roomNo"/>	
	</resultMap>
	
	<!-- resultMap 자체가 해당 하는 컬럼은 만났을때 털커덕 걸려서 해당 vo로다가 넣어주는 개념이다.  -->
	<resultMap id="chatroomResult" type="ChatRoom">
		<result column="room_no" property="roomNo"/>	
		<result column="room_name" property="roomName"/>	
		<result column="create_date" property="createDate"/>	
		<result column="update_date" property="updateDate"/>	
		<result column="group_status" property="groupStatus"/>	
		<result column="chat_content" property="lastChatContent"/>	
		<result column="chat_date" property="lastChatDate"/>	
		<result column="unread_count" property="unreadChatCount"/>	
		<collection property="memList" ofType="com.kh.thezo.member.model.vo.Member">
			<result column="mem_no" property="memNo"/>	
			<result column="path" property="path"/>	
		</collection>
	</resultMap>
	
	<resultMap id="chatdailybasicResult" type="ChatDailyBasic">
		<result column="daily_basic" property="dailyBasic"/>	
		<result column="formatted_date" property="formattedDate"/>	
		
		<collection property="chatList" ofType="com.kh.thezo.chatting.model.vo.ChatLog">
			<result column="chatlog_no" property="chatlogNo"/>	
			<result column="mem_no" property="memNo"/>	
			<result column="name_and_rank" property="nameAndRank"/>	
			<result column="room_no" property="roomNo"/>	
			<result column="chat_content" property="chatContent"/>	
			<result column="chat_time" property="chatDate"/>	
			<result column="path" property="path"/>				
		</collection>
	</resultMap>
	
	
	<!-- 채팅방 목록 조회해오는 sql문  -->
	<select id="ajaxSelectMyChatList" parameterType="java.util.Map" resultMap="chatroomResult" resultType="com.kh.thezo.member.model.vo.Member">
		select 
		       a.room_no
		     , case when group_status = 'P' then (rank || ' ' || mem_name || '님')
                    when group_status = 'G' then room_name
                    end as room_name
		     , (select unread_count
		          from chat_connect ccc
		         where ccc.room_no = a.room_no
		           and ccc.mem_no = #{myMemNo}) as unread_count
		     , (select chat_content
		          from chatlog
		         where chatlog_no = (select max(chatlog_no)
		                               from chatlog
		                              where room_no = a.room_no)) as chat_content
	         , (select case when (to_char(chat_date, 'YYYYMMDD') = to_char(sysdate, 'YYYYMMDD'))
		                    then to_char(chat_date, 'HH24:MI')
		                    when to_number(to_date(to_char(sysdate, 'YYYYMMDD')) - to_date(to_char(chat_date, 'YYYYMMDD')))/365 > 1 
		                    then round(to_number(to_date(to_char(sysdate, 'YYYYMMDD')) - to_date(to_char(chat_date, 'YYYYMMDD')))/365) || '년 전'  
		                    when (to_date(to_char(sysdate, 'YYYYMMDD')) - to_date(to_char(chat_date, 'YYYYMMDD'))) = 1
		                    then '어제'
                       else
                             to_date(to_char(sysdate, 'YYYYMMDD')) - to_date(to_char(chat_date, 'YYYYMMDD')) || '일전' 
                        end as chat_date_processed
                  from chatlog
                 where chatlog_no = (select max(chatlog_no)
                  from chatlog
                 where room_no = a.room_no)) "chat_date"                     
             , (select chat_date
		          from chatlog
		         where chatlog_no = (select max(chatlog_no)
		                               from chatlog
		                              where room_no = a.room_no)) as chat_for_orderby                                   
		     , group_status                         
		     , a.mem_no
		     , m.path
		  from chat_connect a, (
		                        select cc.room_no, cc.mem_no, cc.unread_count, cr.group_status
		                             , cr.room_name
		                          from chat_connect cc
		                          join chatroom cr on (cc.room_no = cr.room_no) 
		                         where mem_no = #{myMemNo}
		                     ) b,
		        member m
		 where a.room_no = b.room_no
		   and a.mem_no != #{myMemNo}
		   and a.mem_no = m.mem_no
           and m.status in ('Y','A')		   
		 order 
		    by chat_for_orderby desc nulls last, start_date desc
	</select>
	
 	<!-- 채팅 나의 동료 리스트 가져오는 sql문 -->
 	<select id="ajaxSelectColleagueList" resultMap="colleagueResult">
 		select mymem_no
 		     , comem_no
 		     , mb1.path as my_img_path
 		     , mb2.path as co_img_path
  	         , mb1.mem_name || ' [' || mb1.rank || ']' as my_name_and_rank
  	         , mb2.mem_name || ' [' || mb2.rank || ']' as co_name_and_rank
 		  from colleague co
 		  join member mb1 on (co.mymem_no = mb1.mem_no)
 		  join member mb2 on (co.comem_no = mb2.mem_no)
 		 where del_status = 'Y'
 		   and mb2.status != 'N'
 		   and mymem_no = #{memNo} 
 		   and mb2.status in ('Y','A')
 		 order
 		    by mb2.mem_name asc  
 	</select>
 	
 	<!-- 이미 동료로 추가되어있는지 확인하는 sql문  -->
 	<select id="ajaxCheckColleague" resultType="_int">
 		select count(*)
 		  from colleague
 		 where mymem_no = #{myMemNo}  
		   and comem_no = #{coMemNo}   	
 	</select>
 	
 	<!-- 단순하게 친추하는 서비스 방만드는것은 ! 다른쪽에서 진행한다. -->
 	<insert id="ajaxAddColleague">
		insert 
	 	  into colleague
	 	  (
	 	  	mymem_no
	 	  , comem_no	
	 	  )
	 	  values
	 	  (
	 	    #{ myMemNo } 
  	 	  , #{ coMemNo } 
	 	  )
 	</insert>
 	
 	<!-- 동료창에서 동료 더블클릭시에 이미 채팅방이 존재하는지 확인하는 sql -->
 	<select id="ajaxCheckExistRoom" resultType="string">
 		select first_tb.room_no
		  from (select room_no
		          from chat_connect
		         where mem_no = ${myMemNo}) first_tb,
		       (select room_no
		          from chat_connect
		         where mem_no = ${coMemNo}) second_tb,
		       (select room_no
		          from chatroom
		         where group_status = 'P') third_tb
		where first_tb.room_no = second_tb.room_no
		  and second_tb.room_no = third_tb.room_no
 	</select>
 	
 	<!-- 채팅방 만드는 Dao 이지만 selectKey로다가 값을 반환할거다. -->
	<insert id="ajaxMakeRoom">
     	insert
     	  into chatroom
     	  (
     	  	room_no
     	  , room_name	
     	  , group_status
     	  )
		values	
		  (
		  	seq_rmno.nextval
		  , (#{myMemNo} || ',' || #{coMemNo})
		  , 'P'	
		  )
	    <selectKey keyProperty="roomNo" resultType="_int" order="AFTER">  
        	select seq_rmno.currval FROM dual  
     	</selectKey>
	</insert> 
 	
 	<!-- 개인채팅 chat_connect 2행 집어넣는 sql문  -->
 	<insert id="ajaxMakeChatConnect">
 		insert all
 		  into chat_connect (room_no, mem_no)values(#{roomNo}, #{myMemNo})
 		  into chat_connect (room_no, mem_no)values(#{roomNo}, #{coMemNo})
		select * from dual 	
 	</insert>
 	
 	<!-- 단체 채팅방에서 동료 초대할때 이미 초대된 동료를 제외한 나의 동료 조회 -->
 	<select id="ajaxSelectExtraColleague" resultMap="colleagueResult">
 		select mymem_no
 		     , comem_no
 		     , mb1.path as myImgPath
 		     , mb2.path as coImgPath
  	         , mb1.mem_name || ' [' || mb1.rank || ']' as my_name_and_rank
  	         , mb2.mem_name || ' [' || mb2.rank || ']' as co_name_and_rank
 		  from colleague co
 		  join member mb1 on (co.mymem_no = mb1.mem_no)
 		  join member mb2 on (co.comem_no = mb2.mem_no)
 		 where del_status = 'Y'
 		   and mb2.status != 'N'
 		   and mymem_no = #{ myMemNo }
 		   and comem_no not in(select mem_no 
                                 from chat_connect
                                where room_no = #{ roomNo })
 		 order
 		    by mb2.mem_name asc
 	</select>
 	
 	<!-- 단체채팅방 이름 가져오는 sql문  -->
 	<select id="ajaxSelectGroupName" resultType="string" parameterType="_int">
 		select room_name
 		  from chatroom
 		 where room_no = #{roomNo} 
 	</select>
 	
 	<!-- 단체 채팅방 이름 수정하는 sql문  -->
 	<update id="ajaxModifyGroupName">
		update
		       chatroom
		   set room_name = #{roomName},
		       update_date = sysdate
		 where room_no = ${roomNo}
 	</update>
 	
 	<!-- 단체 체팅방 만들면서 동시에 해당 방의 방번호를 반환하는 sql문  -->
 	<insert id="ajaxMakeGroupRoom" parameterType="hashMap">
 	    insert
     	  into chatroom
     	  (
     	  	room_no
     	  , room_name	
     	  , group_status
     	  )
		values	
		  (
		  	seq_rmno.nextval
		  , #{roomName}
		  , 'G'	
		  )
	    <selectKey keyProperty="roomNo" resultType="int" order="AFTER">  
        	select seq_rmno.currval FROM dual  
     	</selectKey>
 	</insert>
 	
 	<!-- 단체방이 만들어졌으면 이후에 chat_connect를 단채톡 이원만큼 돌리면서 넣는 sql문 insert all 쓰고자 하면 update태그를 사용해야된다. -->
 	<update id="ajaxMakeGroupChatConnect" parameterType="hashMap">
        <foreach item="coMemNo" open="INSERT ALL" close="SELECT * FROM DUAL" collection="newGroupMemMultiVal">
		     into chat_connect (room_no, mem_no) values (${roomNo} , ${coMemNo}) 
        </foreach>
 	</update>
 	
 	<!-- 단체 채팅방에서 동료를 추가하는 sql문 -->
 	<update id="ajaxAddGroupChat" parameterType="hashMap">
        <foreach item="coMemNo" open="INSERT ALL" close="SELECT * FROM DUAL" collection="addGroupMemMultiVal">
		     into chat_connect (room_no, mem_no) values (${roomNo} , ${coMemNo}) 
        </foreach>
 	
 	</update>
 
 	<!-- 채팅방 머리부 정보를 가져오는 sql문 -->
 	<select id="ajaxBringRoomHeaderList" parameterType="java.util.Map" resultMap="chatroomResult" resultType="com.kh.thezo.member.model.vo.Member">
 	    select cr.room_no
	         , case when group_status = 'P' then (mem_name || ' ' || rank || ' ' || '['|| department  || ']')
	           when group_status = 'G' then room_name
	           end as room_name 
	         , mb.mem_no
	         , mb.path
	    from chatroom cr
	    join chat_connect cc on(cr.room_no = cc.room_no)
	    join member mb on (mb.mem_no = cc.mem_no)
	   where cr.room_no = #{roomNo}
	     and cc.mem_no != #{memNo}
 	</select>
 	
 	<!-- 채팅 기록들 가져오는 sql문  -->
 	<select id="ajaxbringChatInfoList" parameterType="java.util.Map" resultMap="chatdailybasicResult" resultType="com.kh.thezo.chatting.model.vo.ChatLog">
	 	select to_date(to_char(chat_date, 'YYYYMMDD')) as daily_basic
		     , to_char(chat_date, '""YYYY"년 "MM"월 "DD"일 "DAY"') as formatted_date 
		     , chatlog_no
		     , cl.mem_no
		     , mb.mem_name || ' ' || rank as name_and_rank 
		     , mb.path
		     , room_no
		     , chat_content
		     , to_char(chat_date, 'AM HH24:MI') as chat_time
		     , mb.path
		  from chatlog cl
		  join member mb on (mb.mem_no = cl.mem_no) 
		where room_no = #{roomNo}
		 order
		    by chat_date
 	</select>	
 		
	<!-- ============================================================================================ -->
	<!-- ======================================여기서 부터 웹소켓 가지고 노는 구간! =============================  -->  
 	<insert id="InsertChatContent">
	 	insert 
		  into chatlog
		  (
		    chatlog_no
		  , mem_no
		  , room_no
		  , chat_content
		  )
		  values
		  (
		    seq_chno.nextval
		  , #{ memNo }  
		  , #{ roomNo }  
		  , #{ chatContent }  
		  )
		<selectKey keyProperty="chatlogNo" resultType="int" order="AFTER">  
        	select seq_chno.currval FROM dual  
     	</selectKey>
 	</insert>
 	
 	
 	<!-- chat_connect에 마지막으로 읽은 채팅 update하는 sql문   -->
 	<update id="updateConnLastChat">
		update
		       chat_connect
		   set chatlog_no = #{chatlogNo} ,
		       unread_count = 0
		 where room_no = #{roomNo} 
		   and mem_no = #{memNo}
 	</update>
 	
 	<!-- 읽지않은 채팅갯수 조회해와서 unread_count에 update 하는 sql문 -->
 	<update id="updateUnreadCount">
 		update 
		       chat_connect
		   set unread_count = (select count(*)
	  							 from chatlog
	 							where chatlog_no > (select chatlog_no
						                     		  from chat_connect
						                     		 where room_no = #{ roomNo } 
						                       		   and mem_no = #{ memNo} )
								  and room_no = #{ roomNo }
								  and mem_no != #{ memNo})
		 where room_no = #{roomNo} 
		   and mem_no = #{memNo}
 	</update>
 	
 	<!-- 읽지않은 채팅 총갯수 가져오는 sql문  -->
 	<select id="totalUnreadCount" resultType="_int">
		select nvl(sum(unread_count),0)
	      from chat_connect
	     where conn_status = 'Y'
	       and mem_no = #{memNo}
 	</select>

 	<!-- 읽지않은 채팅과 쪽지 총갯수 가져오는 sql문  -->  	
  	<select id="checkUnreadMsgAndChat" resultType="_int">
  	  select sum(a) as total
 		from ( select sum(unread_count) as a
		         from chat_connect
		        where conn_status = 'Y'
		          and mem_no = #{memNo}
		        union
		       select count(*) 
		         from message
		        where read_status = 'N'
		          and recipient_no = #{memNo}
		          and to_recycle_bin = 'Y'
		          and to_del_status = 'Y'
		          and msg_no not in (select msg_no from msg_report))     	
  	</select>
 	
 	<select id="selectAllMyChatRoom" resultType="_int">
	 select room_no
       from chat_connect
      where mem_no = #{memNo}	
 	</select>
 	
 	<update id="updateMyUnreadChatCount" parameterType="java.util.List">
	    <foreach collection="roomlist" item="roomNo" separator="," open="DECLARE BEGIN" close="; END;">
	     	update 
			       chat_connect
			   set unread_count = (select count(*)
		  							 from chatlog
		 							where chatlog_no > (select chatlog_no
							                     		  from chat_connect
							                     		 where room_no = ${ roomNo } 
							                       		   and mem_no = ${ memNo} )
									  and room_no = ${ roomNo }
									  and mem_no != ${ memNo})
			 where room_no = ${roomNo} 
			   and mem_no = #{memNo}
	    </foreach>
    </update>
 	
</mapper>
