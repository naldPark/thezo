<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="notificationMapper">
	<!-- @author Jaewon.s -->

	<resultMap id="notificationResult" type="Notification">
		<result column="nf_no" property="nfNo"/>
		<result column="dept_name" property="nfDeptName"/>
		<result column="start_date" property="nfStartDate"/>
		<result column="end_date" property="nfEndDate"/>
		<result column="nf_content" property="nfContent"/>
		<result column="enroll_date" property="nfEnrollDate"/>
		<result column="for_order_enroll_date" property="nfEnrollDate"/>
		<result column="update_date" property="nfUpdateDate"/>
		<result column="del_status" property="nfDelStatus"/>
	</resultMap>
	
	<!-- null값 비교로 기존에 동일한 알림이 있는지 체크용 sql문  -->
	<select id="beforeInsertCheck" resultType="string">
		select 
				nf_no	
		  from notification
		 where dept_name = #{ nfDeptName }
		   and start_date = #{ nfStartDate }
		   and end_date = #{ nfEndDate } 
		   and nf_content = #{ nfContent }
	</select>
	
	<!-- 알림 테이블에 insert하는  sql문  -->	
	<insert id="insertNotification">
		insert 
		  into notification
		      (
	     		nf_no
		      , dept_name
		      , start_date
		      , end_date
		      , nf_content
	      	  )
     	values
	      	  (
	      	    seq_nfno.nextval
	      	  , #{ nfDeptName } 
	      	  , #{ nfStartDate } 
	      	  , #{ nfEndDate } 
	      	  , #{ nfContent } 
	      	  )
	</insert>

	<!-- 동시 insert를 고려하여 unique한 알림번호를 뽑아오는 sql문   -->	
	<select id="selectRightNfNo" resultType="_int">
		select
				nf_no
		  from notification
		 where dept_name = #{ nfDeptName }
		   and start_date = #{ nfStartDate }
		   and end_date = #{ nfEndDate } 
		   and nf_content = #{ nfContent }
	</select>

	<!-- 알림번호를 바탕으로 알림테이블에 insert성공시 nf_check테이블에도 값이 입력되는 (트리거 같은) sql문   -->	
	<insert id="insertNfCheck">	
		insert
		  into nf_check 
		      (
		        nf_no
		      , mem_no
		      )		      
	    select ${ nfNo } , m.mem_no 	    
	      from member m
         where status = 'Y'
            or status = 'A'
	      	<if test="nfDeptName != '전사원'">
     			 and department like '%' || #{ nfDeptName } || '%'	  			   	      	
	      	</if>
	</insert>
	
	<!-- 알림 전체 갯수 조회용 sql문 -->
	<select id="selectListCount" resultType="_int">
		select
		       count(*)
		  from notification
		 where del_status = 'Y'      
	</select>
	
	<!-- paging처리 값만큼 알림게시글 담아가는 sql문  -->	
	<select id="SelectAndViewNotificationList" resultMap="notificationResult">
		select
		       nf_no
		     , dept_name
		     , to_char(start_date, 'YY-MM-DD') as start_date
		     , to_char(end_date, 'YY-MM-DD') as end_date
		     , nf_content
		     , to_char(enroll_date, 'YY-MM-DD') as for_order_enroll_date
		     , to_char(update_date, 'YY-MM-DD') as update_date
		  from notification
		 where del_status = 'Y'
		 order
		    by enroll_date desc  
	</select>

	<!-- 해당 알림 번호를 가지고 알림 하나를 선택하는 sql문 -->
	<select id="selectNotification" resultMap="notificationResult">
		select
		       nf_no
		     , dept_name
		     , to_char(start_date, 'YYYY-MM-DD') as start_date
		     , to_char(end_date, 'YYYY-MM-DD') as end_date
		     , nf_content
		  from notification
		 where del_status = 'Y'
		   and nf_no = #{ nfNO }
	</select>

	<!-- 상태로 알림 삭제 처리하는 sql문 -->
	<update id="deleteNotification">
		update
		       notification
		   set del_status = 'N'
		 where nf_no = #{ nfNo }       
	</update>

	<!--  아래는 ! 사용자의 입력 상황에 따른 다르게 실행될 수정 sql문들이다.   -->	
	<!-- 첫번째 케이스로 단순하게 기존것을 부서명은 동일 하고 재알림이없어 수정만 하는 sql문 -->
	<update id="updateNotificationCase1">
		update notification
		   set dept_name = #{ nfDeptName }
		     , start_date = #{ nfStartDate }
		     , end_date = #{ nfEndDate }
		     , nf_content = #{ nfContent }
		     , update_date = sysdate
	     where nf_no = #{ nfNo }
	</update>

	<!-- 두번째 케이스로 부서가 다른! 경우이며 재알림 설정이 없는 경우 sql문 -->
	<delete id="deleteOriginNfCheck">
		delete nf_check
		 where nf_no = ${ nfNo }
		   and mem_no in (select 
		                        mem_no 
		                   from member 
	   			          where status = 'Y'
				      	<if test="nfDeptName != '전사원'">
			     			and department like '%' || #{ nfDeptName } || '%'	  			   	      	
				      	</if>
		                 )      
	</delete>
	<!-- 나머지 2번째 케이스는 기존에 있던 sql문 재사용 해주면 된다!  -->

	<!-- nf_check 테이블에서 사용자들이 읽음 처리한것을 읽지않음 처리하는 sql문  -->
	<update id="updateNfCheckUnRead">
		update
		       nf_check
		   set read_status = 'Y'
		 where nf_no = #{ nfNo }       	
	</update>

	<!-- ajax로 나의 memNo를 기준으로 알림 목록 가져오는 sql문  -->
	<select id="ajaxSelectListNf" resultMap="notificationResult">
		select
		       nf_no
		     , dept_name
		     , to_char(start_date, 'YYYY-MM-DD') as start_date
		     , to_char(end_date, 'YYYY-MM-DD') as end_date
		     , nf_content
		     , to_char(enroll_date, 'YY-MM-DD') as for_order_enroll_date
		     , to_char(update_date, 'YY-MM-DD') as update_date
		  from notification
          join nf_check using(nf_no)
		 where del_status = 'Y'
           and mem_no = #{ memNo }
           and dept_name in ('전사원', (select department from member where mem_no= #{ memNo }) )
		 order
		    by enroll_date desc  		
	</select>
	
	<!-- 단순히 읽지 않은 알림 갯수 조회해오는 ajax sql문 -->
	<select id="ajaxCountUnreadedNf" resultType="_int">
		select
    	       count(*)
		  from notification
          join nf_check using(nf_no)
		 where del_status = 'Y'
           and mem_no = #{ memNo }
           and dept_name in ('전사원', (select department from member where mem_no= #{ memNo }) )
           and read_status = 'Y'
	</select>
	
	<!-- 읽지않은 알림 리스트 가져오는 ajax sql문 -->
	<select id="ajaxSelectUnreadedNf" resultMap="notificationResult">
		select
		       nf_no
		     , dept_name
		     , to_char(start_date, 'YYYY-MM-DD') as start_date
		     , to_char(end_date, 'YYYY-MM-DD') as end_date
		     , nf_content
		     , to_char(enroll_date, 'YY-MM-DD') as for_order_enroll_date
		     , to_char(update_date, 'YY-MM-DD') as update_date
		  from notification
          join nf_check using(nf_no)
		 where del_status = 'Y'
           and mem_no = #{ memNo }
           and read_status = 'Y'
           and dept_name in ('전사원', (select department from member where mem_no= #{ memNo }) )
         order
		    by start_date desc  		
	</select>
	 
	<!-- 받은 알림을 읽음 처리하는 sql문 -->
	<update id="ajaxUpdateUserNf" parameterType="hashMap">
		update
		       nf_check
		   set read_status = 'N'
		 where mem_no = ${memNo}
		   and nf_no in ( 
			<foreach item="nfNo" index="index" collection="nfNoList" separator=",">
				${nfNo}
			</foreach>
			)		 	
	</update>



</mapper>
